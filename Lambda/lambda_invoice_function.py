# -*- coding: utf-8 -*-
"""Lambda invoice function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cg679JDN9iMjxdPs_roiAbTDsRysShrN
"""

import boto3
import uuid

textract = boto3.client('textract')
dynamodb = boto3.resource('dynamodb')
sns = boto3.client('sns')

TABLE_NAME = "Invoices"
TOPIC_ARN = "arn:aws:sns:us-east-1:579111114411:InvoiceNotifications"

def lambda_handler(event, context):
    # ‚úÖ Always define variables early
    extracted_data = {}
    invoice_id = str(uuid.uuid4())

    try:
        # ‚úÖ Simulate S3 trigger input
        record = event['Records'][0]['s3']
        bucket = record['bucket']['name']
        document = record['object']['key']

        # ‚úÖ Call Textract
        response = textract.analyze_document(
            Document={'S3Object': {'Bucket': bucket, 'Name': document}},
            FeatureTypes=["FORMS"]
        )

        blocks = response.get('Blocks', [])
        for block in blocks:
            if block['BlockType'] == 'KEY_VALUE_SET' and 'KEY' in block.get('EntityTypes', []):
                key = ""
                value = ""

                # Extract key
                if 'Relationships' in block:
                    for rel in block['Relationships']:
                        if rel['Type'] == 'CHILD':
                            for id_ in rel['Ids']:
                                child = next((b for b in blocks if b['Id'] == id_), None)
                                if child and 'Text' in child:
                                    key += child['Text'] + " "

                # Extract value
                for rel in block.get('Relationships', []):
                    if rel['Type'] == 'VALUE':
                        for id_ in rel['Ids']:
                            val_block = next((b for b in blocks if b['Id'] == id_), None)
                            if val_block and 'Relationships' in val_block:
                                for child_rel in val_block['Relationships']:
                                    if child_rel['Type'] == 'CHILD':
                                        for id_ in child_rel['Ids']:
                                            child = next((b for b in blocks if b['Id'] == id_), None)
                                            if child and 'Text' in child:
                                                value += child['Text'] + " "

                if key.strip() and value.strip():
                    extracted_data[key.strip()] = value.strip()

        # ‚úÖ Save to DynamoDB
        table = dynamodb.Table(TABLE_NAME)
        table.put_item(Item={'InvoiceID': invoice_id, **extracted_data})
        print(f"Saved invoice {invoice_id} to DynamoDB.")

    except Exception as tex_err:
        print("‚ùå Error during Textract/DynamoDB:", str(tex_err))

    # ‚úÖ SNS Notification (even if no data)
    try:
        summary = "\n".join([f"{k}: {v}" for k, v in extracted_data.items()]) or "No fields extracted."
        sns.publish(
            TopicArn=TOPIC_ARN,
            Subject="‚úÖ Invoice Processed",
            Message=f"Invoice ID: {invoice_id}\n\nExtracted Data:\n{summary}"
        )
        print("üì¨ SNS Notification sent.")
    except Exception as sns_err:
        print("‚ùå Error sending SNS notification:", str(sns_err))

    return {
        'statusCode': 200,
        'body': f"Processed invoice {invoice_id}."